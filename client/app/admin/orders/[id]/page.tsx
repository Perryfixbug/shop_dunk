"use client"

import { useState, useEffect } from "react"
import Link from "next/link"
import Image from "next/image"
import { useParams } from "next/navigation"
import { ChevronLeft } from "lucide-react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Separator } from "@/components/ui/separator"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { toast } from "sonner"
import { Badge } from "@/components/ui/badge"
import { formatCurrency } from "@/lib/utils"
import { getAPI, putAPI } from "@/lib/api"
import { getCookie } from "@/lib/cookie"
const token = getCookie("token")

export default function OrderDetailPage() {
  const params = useParams()
  const [order, setOrder] = useState<any>(null)
  const [loading, setLoading] = useState(true)
  const [newStatus, setNewStatus] = useState("")

  useEffect(() => {
    // T√¨m ƒë∆°n h√†ng theo ID

    const findOrder = async () => {
      try{
        const orders = await getAPI('admin/bills', {
          Authorization: `Bearer ${token}`,
        })
        const foundOrder = orders.find((o: any) => o._id === params.id)
        if (foundOrder) {
          setOrder(foundOrder)
          setNewStatus(foundOrder.status)
        }
        setLoading(false)
      }catch (error) {
        console.error("Error fetching orders:", error)
      }
    }
    findOrder()
  }, [params.id])

  // X·ª≠ l√Ω c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
  const handleUpdateStatus = async (status: string) => {
    await putAPI(`admin/bills/${order._id}`, {
      status: status,
    }, {
      Authorization: `Bearer ${token}`,
    })

    setOrder((prev: any) => ({
      ...prev,
      status: status,
    }))
    setNewStatus(status)
    toast.success('C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng!', {
      duration: 2000,
      icon: 'ü´∂',
      description: status,
    })
  }

  // ƒê·ªãnh d·∫°ng ng√†y gi·ªù
  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return new Intl.DateTimeFormat("vi-VN", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
    }).format(date)
  }

  if (loading) {
    return <div className="container mx-auto px-4 py-8">ƒêang t·∫£i...</div>
  }

  if (!order) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="flex items-center gap-2 mb-6">
          <Link href="/admin/orders" className="text-gray-500 hover:text-gray-700">
            <ChevronLeft className="h-5 w-5" />
          </Link>
          <h1 className="text-2xl font-bold">Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng</h1>
        </div>
        <p>ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a.</p>
      </div>
    )
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex items-center gap-2 mb-6">
        <Link href="/admin/orders" className="text-gray-500 hover:text-gray-700">
          <ChevronLeft className="h-5 w-5" />
        </Link>
        <h1 className="text-2xl font-bold">Chi ti·∫øt ƒë∆°n h√†ng #{order.id}</h1>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* Th√¥ng tin ƒë∆°n h√†ng */}
        <div className="md:col-span-2">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span>Th√¥ng tin ƒë∆°n h√†ng</span>
                <OrderStatusBadge status={order.status} />
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <h3 className="text-sm font-medium text-gray-500">Ng√†y ƒë·∫∑t h√†ng</h3>
                    <p className="mt-1">{formatDate(order.createdAt)}</p>
                  </div>
                  <div>
                    <h3 className="text-sm font-medium text-gray-500">Tr·∫°ng th√°i</h3>
                    <div className="mt-1">
                      <select
                        value={newStatus}
                        onChange={(e) => handleUpdateStatus(e.target.value)}
                        className="w-full rounded-md border border-gray-300 p-2"
                      >
                        <option value="Ch·ªù x√°c nh·∫≠n">Ch·ªù x√°c nh·∫≠n</option>
                        <option value="ƒêang x·ª≠ l√Ω">ƒêang x·ª≠ l√Ω</option>
                        <option value="ƒêang giao h√†ng">ƒêang giao h√†ng</option>
                        <option value="ƒê√£ giao h√†ng">ƒê√£ giao h√†ng</option>
                        <option value="ƒê√£ h·ªßy">ƒê√£ h·ªßy</option>
                      </select>
                    </div>
                  </div>
                </div>

                <Separator />

                <div>
                  <h3 className="text-sm font-medium text-gray-500 mb-2">S·∫£n ph·∫©m</h3>
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead className="w-[100px]">H√¨nh ·∫£nh</TableHead>
                        <TableHead>S·∫£n ph·∫©m</TableHead>
                        <TableHead className="text-right">ƒê∆°n gi√°</TableHead>
                        <TableHead className="text-right">S·ªë l∆∞·ª£ng</TableHead>
                        <TableHead className="text-right">Th√†nh ti·ªÅn</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {order.items.map((item: any, index: number) => (
                        <TableRow key={index}>
                          <TableCell>
                            <div className="relative h-16 w-16 overflow-hidden rounded-md">
                              <Image
                                src={item.productId?.images[0] || "/placeholder.svg"}
                                alt={item?.productId.name}
                                fill
                                className="object-cover"
                              />
                            </div>
                          </TableCell>
                          <TableCell>
                            <div>
                              <div className="font-medium">{item?.productId.name}</div>
                              <div className="text-sm text-gray-500">{item?.productId.color}</div>
                            </div>
                          </TableCell>
                          <TableCell className="text-right">{formatCurrency(item?.productId.actualPrice)}</TableCell>
                          <TableCell className="text-right">{item?.quantity}</TableCell>
                          <TableCell className="text-right font-medium">
                            {formatCurrency(item?.productId.actualPrice * item?.quantity)}
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>

                <Separator />

                <div className="flex justify-between font-medium">
                  <span>T·ªïng c·ªông:</span>
                  <span className="text-lg">{formatCurrency(order.total)}</span>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Th√¥ng tin kh√°ch h√†ng */}
        <div>
          <Card>
            <CardHeader>
              <CardTitle>Th√¥ng tin kh√°ch h√†ng</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div>
                  <h3 className="text-sm font-medium text-gray-500">H·ªç t√™n</h3>
                  <p className="mt-1 font-medium">{order.userId.firstName+" "+order.userId.lastName}</p>
                </div>
                <div>
                  <h3 className="text-sm font-medium text-gray-500">S·ªë ƒëi·ªán tho·∫°i</h3>
                  <p className="mt-1">{order.userId.phone}</p>
                </div>
                <Separator />
                <div>
                  <h3 className="text-sm font-medium text-gray-500">ƒê·ªãa ch·ªâ giao h√†ng</h3>
                  <p className="mt-1">{order.shippingAddress}</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}

// Component hi·ªÉn th·ªã tr·∫°ng th√°i ƒë∆°n h√†ng
function OrderStatusBadge({ status }: { status: string }) {
  let color = "bg-gray-100 text-gray-800"
  let label = "Kh√¥ng x√°c ƒë·ªãnh"

  switch (status) {
    case "Ch·ªù x√°c nh·∫≠n":
      color = "bg-yellow-100 text-yellow-800"
      label = "Ch·ªù x√°c nh·∫≠n"
      break
    case "ƒêang x·ª≠ l√Ω":
      color = "bg-blue-100 text-blue-800"
      label = "ƒêang x·ª≠ l√Ω"
      break
    case "ƒêang giao h√†ng":
      color = "bg-purple-100 text-purple-800"
      label = "ƒêang giao h√†ng"
      break
    case "ƒê√£ giao h√†ng":
      color = "bg-green-100 text-green-800"
      label = "ƒê√£ giao h√†ng"
      break
    case "ƒê√£ h·ªßy":
      color = "bg-red-100 text-red-800"
      label = "ƒê√£ h·ªßy"
      break
  }

  return <Badge className={color}>{label}</Badge>
}
